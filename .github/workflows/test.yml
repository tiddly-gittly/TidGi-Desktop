name: Test

on:
  workflow_call:
  push:
    branches:
      - master
      - develop
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.vscode'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '.vscode'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'
          run_install: false
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.pnpm-store
            ~/.npm
          key: test-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            test-${{ runner.os }}-node-
      - name: Install dependencies
        run: pnpm install

      # Set up virtual display for Linux GUI testing
      - name: Set up virtual display
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb xauth
          export DISPLAY=:99
          # Start Xvfb with better configuration for Electron
          Xvfb :99 -screen 0 1280x1024x24 -ac -nolisten tcp -dpi 96 > /dev/null 2>&1 &
          # Give Xvfb time to start
          sleep 3
          # Verify DISPLAY is working
          echo "DISPLAY is set to: $DISPLAY"
          xdpyinfo -display :99 >/dev/null 2>&1 && echo "✓ Virtual display is working" || echo "✗ Virtual display failed"

      - name: Run linting
        run: pnpm run lint
        continue-on-error: true

      - name: Run unit tests
        run: pnpm run test:unit

      - name: Build plugins
        run: pnpm run build:plugin

      - name: Package for testing
        run: pnpm run package

      - name: Verify package output
        run: |
          echo "=== Checking package output ==="
          ls -la out/
          if [ -d "out/TidGi-linux-x64" ]; then
            echo "TidGi-linux-x64 directory found"
            ls -la out/TidGi-linux-x64/
          else
            echo "TidGi-linux-x64 directory not found, checking all directories:"
            find out/ -name "*tidgi*" -o -name "*TidGi*" 2>/dev/null || echo "No TidGi binaries found"
          fi

      - name: Set executable permissions
        run: |
          # Find the actual executable
          TIDGI_EXEC=$(find out/ -name "tidgi" -o -name "TidGi" -type f 2>/dev/null | head -1)
          if [ -n "$TIDGI_EXEC" ]; then
            echo "Found TidGi executable at: $TIDGI_EXEC"
            chmod +x "$TIDGI_EXEC"
            ls -la "$TIDGI_EXEC"
          else
            echo "No TidGi executable found"
            exit 1
          fi

      - name: Create logs directory
        run: mkdir -p logs

      # Add debugging information before running e2e tests
      - name: Debug environment and packaged app
        run: |
          echo "=== Environment Information ==="
          echo "DISPLAY: $DISPLAY"
          echo "PWD: $(pwd)"
          echo "User: $(whoami)"
          
          echo "=== Packaged App Information ==="
          ls -la out/TidGi-linux-x64/
          file out/TidGi-linux-x64/tidgi
          
          echo "=== Virtual Display Check ==="
          ps aux | grep Xvfb || echo "Xvfb not found"
          echo "DISPLAY variable: $DISPLAY"
          
          echo "=== System Resources ==="
          free -m
          df -h
          
          echo "=== Create screenshots directory ==="
          mkdir -p screenshots

      - name: Run e2e tests
        run: pnpm run test:e2e
        env:
          CI: true
          DISPLAY: :99
          DEBUG: "*"
        continue-on-error: true

      # Collect logs immediately after test run
      - name: Collect test artifacts
        if: always()
        run: |
          echo "=== Collecting test artifacts ==="
          
          # Create artifacts directory
          mkdir -p test-artifacts
          
          # Copy logs
          cp -r logs/ test-artifacts/ 2>/dev/null || echo "No logs directory found"
          
          # Copy application logs if they exist
          mkdir -p test-artifacts/app-logs
          cp -r ~/.config/TidGi/logs/ test-artifacts/app-logs/ 2>/dev/null || echo "No TidGi config logs found"
          cp -r userData-dev/logs/ test-artifacts/app-logs/ 2>/dev/null || echo "No userData-dev logs found"
          
          # Copy any screenshots
          cp -r screenshots/ test-artifacts/ 2>/dev/null || echo "No screenshots directory found"
          
          # Copy cucumber reports
          cp cucumber-report.json test-artifacts/ 2>/dev/null || echo "No cucumber-report.json found"
          cp messages.ndjson test-artifacts/ 2>/dev/null || echo "No messages.ndjson found"
          cp features/reports/ test-artifacts/ -r 2>/dev/null || echo "No features/reports found"
          cp @rerun.txt test-artifacts/ 2>/dev/null || echo "No @rerun.txt found"
          
          # Create a test summary
          echo "=== Test Summary ===" > test-artifacts/test-summary.txt
          echo "Date: $(date)" >> test-artifacts/test-summary.txt
          echo "Exit code from e2e tests: $?" >> test-artifacts/test-summary.txt
          
          # List all collected files
          echo "=== Collected Files ===" >> test-artifacts/test-summary.txt
          find test-artifacts -type f >> test-artifacts/test-summary.txt
          
          echo "Test artifacts collected successfully"

      # Upload test artifacts even if tests fail
      - name: Upload test logs and artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-logs
          path: |
            test-artifacts/
            logs/
            features/reports/
            screenshots/
            cucumber-report.json
            messages.ndjson
            @rerun.txt
          retention-days: 7

      # Upload application logs if they exist
      - name: Upload application logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: application-logs
          path: |
            ~/.config/TidGi/logs/
            ~/Library/Logs/TidGi/
            userData-dev/logs/
          retention-days: 7
        continue-on-error: true
